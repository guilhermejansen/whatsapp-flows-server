name: Release & Docker Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    outputs:
      new-release-published: ${{ steps.semantic.outputs.new_release_published }}
      new-release-version: ${{ steps.semantic.outputs.new_release_version }}
      new-release-major-version: ${{ steps.semantic.outputs.new_release_major_version }}
      new-release-minor-version: ${{ steps.semantic.outputs.new_release_minor_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Verify build
        run: npm run build

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          semantic_version: 23
          extra_plugins: |
            @semantic-release/changelog@6
            @semantic-release/git@10
            conventional-changelog-conventionalcommits@7

      - name: Output release info
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo "üéâ New release published!"
          echo "Version: ${{ steps.semantic.outputs.new_release_version }}"
          echo "Major: ${{ steps.semantic.outputs.new_release_major_version }}"
          echo "Minor: ${{ steps.semantic.outputs.new_release_minor_version }}"

  docker-build-push:
    name: Build & Push Docker Multi-Arch
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new-release-published == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/whatsapp-flows-server
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release.outputs.new-release-version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.new-release-version }}
            type=semver,pattern={{major}},value=${{ needs.release.outputs.new-release-version }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=WhatsApp Flow Server
            org.opencontainers.image.description=WhatsApp Flow Server with DDD architecture
            org.opencontainers.image.version=${{ needs.release.outputs.new-release-version }}

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.release.outputs.new-release-version }}
            BUILD_DATE=${{ github.event.repository.updated_at }}

      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          repository: ${{ secrets.DOCKER_USERNAME }}/whatsapp-flows-server
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./README.md
        continue-on-error: true

      - name: Image digest
        run: |
          echo "üê≥ Docker images published:"
          echo "${{ steps.meta.outputs.tags }}"
