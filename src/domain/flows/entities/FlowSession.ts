import { SessionStatus } from '../../../shared/types/flow-types';
import { ValidationError } from '../../../shared/errors/ValidationError';

/**
 * FlowSession Entity - Represents an active user session
 */
export class FlowSession {
  constructor(
    public readonly id: string,
    public readonly flowId: string,
    public readonly flowToken: string,
    public phoneNumber: string | undefined,
    public currentScreen: string | undefined,
    public sessionData: Record<string, any>,
    public status: SessionStatus,
    public readonly startedAt: Date,
    public completedAt: Date | undefined,
    public lastActivityAt: Date,
    public errorMessage: string | undefined,
    public updatedAt: Date | undefined
  ) {
    this.validate();
  }

  private validate(): void {
    if (!this.flowToken || this.flowToken.trim().length === 0) {
      throw new ValidationError('Flow token cannot be empty');
    }

    if (!this.flowId || this.flowId.trim().length === 0) {
      throw new ValidationError('Flow ID cannot be empty');
    }
  }

  /**
   * Update session data (accumulate data as user navigates)
   */
  public updateSessionData(newData: Record<string, any>): void {
    this.sessionData = {
      ...this.sessionData,
      ...newData,
    };
    this.lastActivityAt = new Date();
  }

  /**
   * Navigate to new screen
   */
  public navigateToScreen(screenId: string): void {
    this.currentScreen = screenId;
    this.lastActivityAt = new Date();
  }

  /**
   * Mark session as completed
   */
  public complete(): void {
    this.status = 'completed';
    this.completedAt = new Date();
    this.lastActivityAt = new Date();
  }

  /**
   * Mark session as expired
   */
  public expire(): void {
    this.status = 'expired';
    this.lastActivityAt = new Date();
  }

  /**
   * Mark session as error
   */
  public markAsError(errorMessage: string): void {
    this.status = 'error';
    this.errorMessage = errorMessage;
    this.lastActivityAt = new Date();
  }

  /**
   * Check if session is active
   */
  public isActive(): boolean {
    return this.status === 'active';
  }

  /**
   * Check if session is completed
   */
  public isCompleted(): boolean {
    return this.status === 'completed';
  }

  /**
   * Check if session is expired
   */
  public isExpired(): boolean {
    return this.status === 'expired';
  }

  /**
   * Create from database row
   */
  static fromDatabase(row: any): FlowSession {
    return new FlowSession(
      row.id,
      row.flow_id,
      row.flow_token,
      row.phone_number,
      row.current_screen,
      row.session_data || {},
      row.status,
      new Date(row.started_at),
      row.completed_at ? new Date(row.completed_at) : undefined,
      new Date(row.last_activity_at),
      row.error_message,
      row.updated_at ? new Date(row.updated_at) : undefined
    );
  }

  /**
   * Create new session
   */
  static create(flowId: string, flowToken: string, phoneNumber?: string): FlowSession {
    const now = new Date();
    return new FlowSession(
      '', // ID will be generated by database
      flowId,
      flowToken,
      phoneNumber,
      undefined,
      {},
      'active',
      now,
      undefined,
      now,
      undefined,
      now
    );
  }
}
