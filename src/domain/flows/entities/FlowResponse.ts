import { ValidationError } from '../../../shared/errors/ValidationError';

/**
 * FlowResponse Entity - Represents a completed Flow response
 */
export class FlowResponse {
  constructor(
    public readonly id: string,
    public readonly sessionId: string,
    public readonly flowId: string,
    public readonly flowToken: string,
    public readonly phoneNumber: string | undefined,
    public readonly responseData: Record<string, any>,
    public readonly rawWebhookPayload: Record<string, any> | undefined,
    public readonly receivedAt: Date
  ) {
    this.validate();
  }

  private validate(): void {
    if (!this.flowToken || this.flowToken.trim().length === 0) {
      throw new ValidationError('Flow token cannot be empty');
    }

    if (!this.responseData || Object.keys(this.responseData).length === 0) {
      throw new ValidationError('Response data cannot be empty');
    }
  }

  /**
   * Get specific field from response data
   */
  public getField(fieldName: string): any {
    return this.responseData[fieldName];
  }

  /**
   * Check if response has field
   */
  public hasField(fieldName: string): boolean {
    return fieldName in this.responseData;
  }

  /**
   * Get all field names
   */
  public getFieldNames(): string[] {
    return Object.keys(this.responseData);
  }

  /**
   * Create from database row
   */
  static fromDatabase(row: any): FlowResponse {
    return new FlowResponse(
      row.id,
      row.session_id,
      row.flow_id,
      row.flow_token,
      row.phone_number,
      row.response_data,
      row.raw_webhook_payload,
      new Date(row.received_at)
    );
  }

  /**
   * Create new response
   */
  static create(
    sessionId: string,
    flowId: string,
    flowToken: string,
    phoneNumber: string | undefined,
    responseData: Record<string, any>,
    rawWebhookPayload?: Record<string, any>
  ): FlowResponse {
    return new FlowResponse(
      '', // ID will be generated by database
      sessionId,
      flowId,
      flowToken,
      phoneNumber,
      responseData,
      rawWebhookPayload,
      new Date()
    );
  }
}
