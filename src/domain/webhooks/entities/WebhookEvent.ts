/**
 * WebhookEvent Entity - Represents a received webhook event
 */
export class WebhookEvent {
  constructor(
    public id: string,
    public readonly eventType: string,
    public readonly rawPayload: Record<string, any>,
    public readonly signature: string | undefined,
    public signatureValid: boolean,
    public processed: boolean,
    public callbackSent: boolean,
    public callbackUrl: string | undefined,
    public callbackStatusCode: number | undefined,
    public callbackError: string | undefined,
    public readonly receivedAt: Date,
    public processedAt: Date | undefined,
    public callbackSentAt: Date | undefined
  ) {}

  /**
   * Mark as processed
   */
  public markAsProcessed(): void {
    this.processed = true;
    this.processedAt = new Date();
  }

  /**
   * Mark callback as sent successfully
   */
  public markCallbackSent(statusCode: number): void {
    this.callbackSent = true;
    this.callbackStatusCode = statusCode;
    this.callbackSentAt = new Date();
  }

  /**
   * Mark callback as failed
   */
  public markCallbackFailed(error: string, statusCode?: number): void {
    this.callbackSent = false;
    this.callbackError = error;
    this.callbackStatusCode = statusCode;
    this.callbackSentAt = new Date();
  }

  /**
   * Create from database row
   */
  static fromDatabase(row: any): WebhookEvent {
    return new WebhookEvent(
      row.id,
      row.event_type,
      row.raw_payload,
      row.signature,
      row.signature_valid,
      row.processed,
      row.callback_sent,
      row.callback_url,
      row.callback_status_code,
      row.callback_error,
      new Date(row.received_at),
      row.processed_at ? new Date(row.processed_at) : undefined,
      row.callback_sent_at ? new Date(row.callback_sent_at) : undefined
    );
  }

  /**
   * Create new event
   */
  static create(
    eventType: string,
    rawPayload: Record<string, any>,
    signature?: string
  ): WebhookEvent {
    return new WebhookEvent(
      '', // ID will be generated by database
      eventType,
      rawPayload,
      signature,
      false,
      false,
      false,
      undefined,
      undefined,
      undefined,
      new Date(),
      undefined,
      undefined
    );
  }
}
